# -*- coding: utf-8 -*-
"""projeto_calculo_numerico (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bBgHUknUWtuB0reUYyvkQ3uPnYcwiHb7

Integrantes:


Aléxia Suares    RA: 24.122.017-7


Gabrielle Mitie  RA: 24.122.022-7


Larissa Gonçalves RA: 24.222.082-0

#Regressão Linear
"""

import numpy as np
import matplotlib.pyplot as plt
import sympy as sy
from sklearn.linear_model import LinearRegression # nome pacote scikit-learn
from sklearn.metrics import r2_score
import pandas as pd
from sklearn import datasets
import sympy as sy
from scipy.interpolate import lagrange
from numpy.polynomial.polynomial import Polynomial
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline
import seaborn as sns
import statistics
from scipy import stats
from scipy.stats import norm
import statsmodels.api as sm
import seaborn as sns




data = pd.read_csv('/content/sample_data/diabetes-dataset.csv', encoding="ISO-8859-1")
#print("Número de linhas e colunas:",data.shape)
data.head(25)

data = data.dropna()
data.head(25)

"""**Primeira regressão linear**

"""

from scipy.stats import pearsonr


data = data.to_numpy()
x = data[:,7] #idade
y = data[:,0] #gravidez

X = np.array(x).reshape(-1, 1)
y = np.array(y)

# Calcule o coeficiente de correlação de Pearson
correlation, p_value = pearsonr(x, y)

modelo = LinearRegression().fit(X, y)
plt.scatter(X, y)
plt.plot(X, modelo.predict(X), color = 'red')
print("O modelo é: y = %.3f + (%.3f)x" %(modelo.intercept_, modelo.coef_))
print("Coeficiente de correlação de Pearson:", correlation)
plt.xlabel('Idade dos pacientes')
plt.ylabel('Número de gravidezes')
r_squared = correlation**2
print("Coeficiente de determinação R²:", r_squared)

"""**Segunda regressão linear**"""

from scipy.stats import pearsonr


#data = data.to_numpy()
x = data[:,7] #idade
y = data[:,1] #glucose


X = np.array(x).reshape(-1, 1)
y = np.array(y)

# Calcule o coeficiente de correlação de Pearson
correlation, p_value = pearsonr(x, y)

modelo = LinearRegression().fit(X, y)
plt.scatter(X, y)
plt.plot(X, modelo.predict(X), color = 'red')
print("O modelo é: y = %.3f + (%.3f)x" %(modelo.intercept_, modelo.coef_))
print("Coeficiente de correlação de Pearson:", correlation)
plt.xlabel('Idade dos pacientes')
plt.ylabel('Indice de glucose')
r_squared = correlation**2
print("Coeficiente de determinação R²:", r_squared)

"""**Terceira regressão linear**"""

from scipy.stats import pearsonr


#data = data.to_numpy()
x = data[:,7] #idade
y = data[:,4] #insulina


X = np.array(x).reshape(-1, 1)
y = np.array(y)

# Calcule o coeficiente de correlação de Pearson
correlation, p_value = pearsonr(x, y)

modelo = LinearRegression().fit(X, y)
plt.scatter(X, y)
plt.plot(X, modelo.predict(X), color = 'red')
print("O modelo é: y = %.3f + (%.3f)x" %(modelo.intercept_, modelo.coef_))
print("Coeficiente de correlação de Pearson:", correlation)
plt.xlabel('Idade dos pacientes')
plt.ylabel('Indice de insulina')
r_squared = correlation**2
print("Coeficiente de determinação R²:", r_squared)

"""**Quarta regressão linear**"""

from scipy.stats import pearsonr


#data = data.to_numpy()
x = data[:,4] #insulina
y = data[:,3] #espessura da pele


X = np.array(x).reshape(-1, 1)
y = np.array(y)

# Calcule o coeficiente de correlação de Pearson
correlation, p_value = pearsonr(x, y)

modelo = LinearRegression().fit(X, y)
plt.scatter(X, y)
plt.plot(X, modelo.predict(X), color = 'red')
print("O modelo é: y = %.3f + (%.3f)x" %(modelo.intercept_, modelo.coef_))
print("Coeficiente de correlação de Pearson:", correlation)
plt.xlabel('Insulina')
plt.ylabel('Espessura da pele')
r_squared = correlation**2
print("Coeficiente de determinação R²:", r_squared)

"""**Quinta regressão linear**"""

from scipy.stats import pearsonr


#data = data.to_numpy()
x = data[:,6] #pré disposição a diabetes
y = data[:,4] #insulina


X = np.array(x).reshape(-1, 1)
y = np.array(y)

# Calcule o coeficiente de correlação de Pearson
correlation, p_value = pearsonr(x, y)

modelo = LinearRegression().fit(X, y)
plt.scatter(X, y)
plt.plot(X, modelo.predict(X), color = 'red')
print("O modelo é: y = %.3f + (%.3f)x" %(modelo.intercept_, modelo.coef_))
print("Coeficiente de correlação de Pearson:", correlation)
plt.xlabel('Pré disposição a diabetes')
plt.ylabel('Insulina')
r_squared = correlation**2
print("Coeficiente de determinação R²:", r_squared)

"""# Regressão Múltipla

"""

x = data[:, [1, 2, 3, 6]] #Glucose, BloodPressure, SkinThickness, pre disposição a diabetes

y = data[:, 4] #insulina
x = sm.add_constant(x)


est = sm.OLS(y, x).fit()


print(est.summary())

x = data[:, [1, 3, 6]]

y = data[:, 4]


x = sm.add_constant(x)


est = sm.OLS(y, x).fit()

print(est.summary())